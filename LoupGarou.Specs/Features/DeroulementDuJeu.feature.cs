// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LoupGarou.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DeroulementDuJeuFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DeroulementDuJeu.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("fr-FR"), "Déroulement du jeu", "Dans le but de maintenir le bon déroulement d\'une partie\r\nEn tant que maitre du j" +
                    "eu robotisé\r\nJe veux gérer les organiser l\'ordre des tours de jeu", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Déroulement du jeu")))
            {
                LoupGarou.Specs.Features.DeroulementDuJeuFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Déroulement du premier tour de jeu")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Déroulement du jeu")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("sorcière")]
        public virtual void DeroulementDuPremierTourDeJeu()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Déroulement du premier tour de jeu", new string[] {
                        "sorcière"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
testRunner.Given("tous les personnages sont présents dans le jeu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Soit ");
#line 9
testRunner.When("la partie se lance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "ordre"});
            table1.AddRow(new string[] {
                        "Voleur"});
            table1.AddRow(new string[] {
                        "Cupidon"});
            table1.AddRow(new string[] {
                        "Voyante"});
            table1.AddRow(new string[] {
                        "Amoureux"});
            table1.AddRow(new string[] {
                        "Loup Garou"});
            table1.AddRow(new string[] {
                        "Sorcière"});
            table1.AddRow(new string[] {
                        "Villageois"});
#line 10
testRunner.Then("le premier tour de jeu se déroule dans cet ordre:", ((string)(null)), table1, "Alors ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Déroulement des autres tours de jeu")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Déroulement du jeu")]
        public virtual void DeroulementDesAutresToursDeJeu()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Déroulement des autres tours de jeu", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
testRunner.Given("tous les personnages sont présents dans le jeu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Soit ");
#line 22
testRunner.When("le premier tour de jeu est fini", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ordre"});
            table2.AddRow(new string[] {
                        "Voyante"});
            table2.AddRow(new string[] {
                        "Loup Garou"});
            table2.AddRow(new string[] {
                        "Sorcière"});
            table2.AddRow(new string[] {
                        "Villageois"});
#line 23
testRunner.Then("les autres tours de jeu se déroule dans cet ordre:", ((string)(null)), table2, "Alors ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Déroulement d\'un tour de jeu avec personnage mort ou absent du jeu")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Déroulement du jeu")]
        public virtual void DeroulementDUnTourDeJeuAvecPersonnageMortOuAbsentDuJeu()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Déroulement d\'un tour de jeu avec personnage mort ou absent du jeu", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Personnage"});
            table3.AddRow(new string[] {
                        "Voyante"});
            table3.AddRow(new string[] {
                        "Loup Garou"});
            table3.AddRow(new string[] {
                        "Sorcière"});
            table3.AddRow(new string[] {
                        "Villageois"});
#line 31
testRunner.Given("le tour de jeu est le suivant:", ((string)(null)), table3, "Soit ");
#line 37
testRunner.When("la Voyante meurt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ordre"});
            table4.AddRow(new string[] {
                        "Loup Garou"});
            table4.AddRow(new string[] {
                        "Sorcière"});
            table4.AddRow(new string[] {
                        "Villageois"});
#line 38
testRunner.Then("les autres tours de jeu se déroule dans cet ordre:", ((string)(null)), table4, "Alors ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
